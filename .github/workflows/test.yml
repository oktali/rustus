on:
  - pull_request

name: Lint check
jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/*.md"]'

  fmt_check:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Adding component
        run: rustup component add rustfmt
      - name: Checking code format
        run: cargo fmt -- --check

  code_check:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -p rustus

  tests:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: start docker services
        run: docker compose up -d --wait
      - name: Run tests
        run: cargo test --jobs 1
        env:
          TEST_REDIS_URL: redis://localhost:6379/0
          TEST_AMQP_URL: amqp://guest:guest@localhost:5672
          TEST_S3_ENDPOINT: "http://localhost:9000"
          TEST_S3_ACCESS_KEY: "rustus-test"
          TEST_S3_SECRET_KEY: "rustus-test"
      - name: stop docker compose
        if: always()
        run: docker compose down -v
